@using FleetDashClient.Models
@inherits ComponentBase

<div class="account-status">
    <Tooltip Text="@tooltipText">
        <img src="@statusImage" height="30"/>
    </Tooltip>
</div>
<div class="account-name">@Character.Name</div>
<div class="account-remove-btn">
    @if (removeConfirming)
    {
        <button id="confirm-button" @onclick="@OnConfirmClick">Confirm</button>
        <button id="cancel-button" @onclick="@OnCancelClick">Cancel</button>
    }
    else
    {
        <img id="remove-button" src="/images/close-circle.svg" height="30" @onclick="@OnRemoveAccount"/>
    }
</div>

@code {

    [Parameter]
    public Character Character { get; set; }
    [Parameter]
    public CharacterStatus Status { get; set; }
    [Parameter]
    public Func<string, Task> DeleteCharacterHook { get; set; }
    [Parameter]
    public Action RefreshList { get; set; }

    private string statusImage;
    private string tooltipText;

    private bool removeConfirming = false;

    protected override void OnInitialized()
    {
        switch (Status)
        {
            case CharacterStatus.Ready:
                statusImage = "/images/checkmark-circle-outline.svg";
                tooltipText = "Ready and waiting";
                break;

            case CharacterStatus.ActivelyStreaming:
                statusImage = "/images/play-circle-outline.svg";
                tooltipText = "Actively streaming";
                break;

            case CharacterStatus.Error:
                statusImage = "/images/alert-circle.svg";
                tooltipText = "Error has occured";
                break;
        }
    }

    private void OnRemoveAccount(MouseEventArgs mouseEventArgs)
    {
        removeConfirming = true;
    }

    private async Task OnConfirmClick(MouseEventArgs mouseEventArgs)
    {
        await DeleteCharacterHook(Character.Id);
        removeConfirming = false;
        RefreshList();
    }

    private void OnCancelClick(MouseEventArgs mouseEventArgs)
    {
        removeConfirming = false;
    }

}